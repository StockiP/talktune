import * as React from 'react';
import Button from '@mui/material/Button';

import Stack from '@mui/material/Stack';
import Dialog from '@mui/material/Dialog';
import DialogActions from '@mui/material/DialogActions';
import DialogContent from '@mui/material/DialogContent';
import DialogContentText from '@mui/material/DialogContentText';
import DialogTitle from '@mui/material/DialogTitle';
import Typography from "./Typography";
import Divider from '@mui/material/Divider';
import StarRating from "./StarRating";
import APIService from "../helpers/APIService";
import TextField from "@mui/material/TextField";

export default function SurveyDialog(props) {
    const { open, onClose } = props;
    const [ratings, setRatings] = React.useState([4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 'Enter your Feedback Here']);

    const handleRatingChange = (index, newValue) => {
        const newRatings = [...ratings];
        newRatings[index] = newValue;
        setRatings(newRatings);
    };

    function convertRatingsToJSON(ratings) {
        const survey = {};
        for (let i = 0; i < ratings.length; i++) {
            survey[`R${i+1}`] = ratings[i];
        }
        return { survey };
    }

    const handleSubmit = () => {
        try {
            const surveyJSON = convertRatingsToJSON(ratings);
            APIService.submitSurvey(surveyJSON);
        } catch (error) {
            console.log(error);
        }
    };

    return (
        <div>
            <Dialog open={open} onClose={onClose}>
                <DialogTitle>Survey</DialogTitle>
                <DialogContent>
                    <DialogContentText>
                        Please rate your experience with the analysis and this prototype.
                    </DialogContentText>
                    <Divider sx={{mb:2}}/>
                    <Stack spacing={1}>
                        <Typography variant="h6">
                            Analysis Evaluation
                        </Typography>
                        <Typography component="legend">
                            I found the analysis to be valid and reliable in detecting the correct sentiment in the given text.
                        </Typography>
                        <StarRating label="RQ1" value={ratings[0]} handleRatingChange={(newValue) => handleRatingChange(0, newValue)} />
                        <Typography component="legend">
                            I believe that the Analysis accurately identified the overall mood of the text in question.
                        </Typography>
                        <StarRating label="RQ2" value={ratings[1]} handleRatingChange={(newValue) => handleRatingChange(1, newValue)} />
                        <Typography component="legend">
                            The rephrasing made substantial improvements to the original text.
                        </Typography>
                        <StarRating label="RQ3" value={ratings[2]} handleRatingChange={(newValue) => handleRatingChange(2, newValue)} />
                        <Typography component="legend">
                            I found the analysis and rephrasing to be effective and efficient in accomplishing their objectives.
                        </Typography>
                        <StarRating label="RQ4" value={ratings[3]} handleRatingChange={(newValue) => handleRatingChange(3, newValue)} />
                        <Typography component="legend">
                            The output generated by the tools helped to accomplish what I intended to do.
                        </Typography>
                        <StarRating label="RQ5" value={ratings[4]} handleRatingChange={(newValue) => handleRatingChange(4, newValue)} />
                        <Typography component="legend">
                            I believe that the rephrasing tool successfully incorporated the chosen sentiment into the original text.                        </Typography>
                        <StarRating label="RQ6" value={ratings[5]} handleRatingChange={(newValue) => handleRatingChange(5, newValue)} />
                        <Typography component="legend">
                            I would recommend the use of these tools for similar tasks.
                        </Typography>
                        <StarRating label="RQ7" value={ratings[6]} handleRatingChange={(newValue) => handleRatingChange(6, newValue)} />
                        <Typography variant="h6">
                            User Experience
                        </Typography>
                        <Typography component="legend">
                            This website is well tailored to the requirements of the task.
                        </Typography>
                        <StarRating label="RQ8" value={ratings[7]} handleRatingChange={(newValue) => handleRatingChange(7, newValue)} />
                        <Typography component="legend">
                            This website is uniformly designed and I can orientate myself well.
                        </Typography>
                        <StarRating label="RQ9" value={ratings[8]} handleRatingChange={(newValue) => handleRatingChange(8, newValue)} />
                        <Typography component="legend">
                            This website is easy to use without any help or manual.
                        </Typography>
                        <StarRating label="RQ10" value={ratings[9]} handleRatingChange={(newValue) => handleRatingChange(9, newValue)} />
                        <Typography component="legend">
                            This website provides sufficient information about what it is doing.
                        </Typography>
                        <StarRating label="RQ11" value={ratings[10]} handleRatingChange={(newValue) => handleRatingChange(10, newValue)} />
                        <Typography component="legend">
                            This website offers a situation-specific explanation on request, which will help.
                        </Typography>
                        <StarRating label="RQ12" value={ratings[11]} handleRatingChange={(newValue) => handleRatingChange(11, newValue)} />
                        <Typography variant="h6">
                            Further Feedback:
                        </Typography>
                        <TextField multiline maxRows={10} label="RQ13" value={ratings[12]} onChange={(event) => handleRatingChange(12, event.target.value)} />
                    </Stack>
                </DialogContent>
                <DialogActions>
                    <Button onClick={onClose}>Cancel</Button>
                    <Button onClick={handleSubmit}>Submit</Button>
                </DialogActions>
            </Dialog>
        </div>
    );
}